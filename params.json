{"note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"Satellite","tagline":"Extensions for node-http-proxy","body":"Satellite\r\n=========\r\n\r\nExtensions for Nodejitsu's node-http-proxy library.\r\n\r\nWhat is it for?\r\n---\r\n\r\nSatellite uses Nodejitsu's [node-http-proxy](https://github.com/nodejitsu/node-http-proxy) to help with:\r\n\r\n- Load-balancing requests across multiple servers via a round-robin strategy.\r\n- Supporting sticky sessions by routing requests to specific servers.\r\n\r\nAnd in the future...\r\n\r\n- Being able to add or remove servers from the proxy list on-the-fly.\r\n- Running the proxy server over multiple CPU cores using Node.js' cluster API.\r\n\r\nInstallation\r\n---\r\n\r\n    npm install satellite\r\n\r\nUsage (round-robin)\r\n---\r\n\r\nLet's say you have an application which has multiple instances running on different servers, \r\nand you want to setup a proxy server to load-balance requests across those servers. \r\n\r\nSatellite provides a round-robin strategy that you can apply to your existing proxy server code:\r\n\r\n\r\n```javascript\r\n    // This example demonstrates proxying requests between\r\n    // 2 servers\r\n    var httpProxy   = require('http-proxy');\r\n    var satellite   = require('satellite');\r\n\r\n    // Add 2 different servers to the proxy list\r\n    satellite.addAddress({host: '111.11.111.111', port: 80}, function(res){});\r\n    satellite.addAddress({host: '222.22.222.222', port: 80}, function(res){});\r\n\r\n    var proxyServer = httpProxy.createServer(\r\n\r\n      // tell the proxy serve to use a connect-compatible \r\n      // middleware that provides round-robin support.\r\n      satellite.roundRobinStrategy,\r\n\r\n      function (req,res, proxy){\r\n\r\n        // tell proxyRequest to use the target address\r\n        // determined by satellite, which will be one\r\n        // of the 2 servers.\r\n        satellite.store.targetAddress.get( function(targetAddress) {\r\n          proxy.proxyRequest(req, res, targetAddress);\r\n        });\r\n        \r\n      }\r\n    ).listen(80);\r\n```\r\n\r\nYour proxy server will now distribute requests to the servers in a round-robin fashion.\r\n\r\nUsage (sticky-session support)\r\n---\r\n\r\nSome application setups require sticky-session support. \r\n\r\nFor more info on sticky sessions and why you would use them, \r\nsee the explanation provided in the Readme on [SockJS' github repository](https://github.com/sockjs/sockjs-node#sticky-sessions).\r\n\r\nTo enable sticky session support in your proxy server, you can do this:\r\n\r\n```javascript\r\n    // This example demonstrates using sticky session\r\n    // support\r\n    var httpProxy   = require('http-proxy');\r\n    var satellite   = require('satellite');\r\n\r\n    // Add 2 different servers to the proxy list\r\n    satellite.addAddress({host: '111.11.111.111', port: 80});\r\n    satellite.addAddress({host: '222.22.222.222', port: 80});\r\n\r\n    var proxyServer = httpProxy.createServer(\r\n\r\n      // tell the proxy server to use sticky-session support. \r\n      satellite.stickySessionStrategy,\r\n\r\n      function (req,res, proxy){\r\n        satellite.store.targetAddress.get( function(targetAddress) {\r\n          proxy.proxyRequest(req, res, targetAddress);\r\n        });\r\n      }\r\n    ).listen(80);\r\n```\r\n\r\n**NOTE:** If you wish to use both round-robin and sticky-session support \r\nin your application, make sure that you call the sticky-session middleware\r\nafter you have called the round-robin middleware, like this:\r\n\r\n```javascript\r\n    var proxyServer = httpProxy.createServer(\r\n      satellite.roundRobinStrategy,\r\n      satellite.stickySessionStrategy,\r\n```\r\n\r\nRedis store\r\n---\r\n\r\nAt the moment, there is a Redis store option in active development (in order to support use of Node.js's cluster API with satellite). There is a hanging request issue which I am yet to resolve, so I will keep working at this until it is fixed.\r\n\r\nDependencies\r\n---\r\n\r\nSatellite was built against Node.js v0.6.17, and has it's engine set against that version.\r\n\r\nIt may be able to run on previous versions of Node.js, but you'll need to git clone a copy and modify the package.json to do so.\r\n\r\nBecause there is also a Redis store in development, Redis is an optional dependency.\r\n\r\nLicense\r\n---\r\n\r\nMIT\r\n"}